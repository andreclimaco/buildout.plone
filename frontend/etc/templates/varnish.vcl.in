# Include list of backends and portal
#include "${buildout:directory}/etc/varnish/backends.vcl";
#include "${buildout:directory}/etc/varnish/vhosts.vcl";

backend default {
    .host = "${varnish-config:backend-host}";
    .port = "${varnish-config:backend-port}";
    .connect_timeout = 0.4s;
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 60s;
}


acl purge {
    "localhost";
    "127.0.0.1";
    ${varnish-config:purge-hosts}
}


sub vcl_recv {
   # Allow a grace period for offering "stale" data in case backend lags
   # https://www.varnish-cache.org/docs/3.0/tutorial/handling_misbehaving_servers.html#misbehaving-servers
    if (!req.backend.healthy) {
        set req.grace = 5m;
    } else {
        set req.grace = 120s;
    }
   
    # Hotfix to fix CVE 2011-3587 for Zope 2.12 + 2.13: Products.Zope_Hotfix_CVE_2011_3587
    if (req.url ~ "/p_/webdav/?(.*)"){
        set req.url = "/";
    }

    # Nada de ASP ou PHP ou dll
    if (req.url ~ "\.(dll|asp|php)$") {
        set req.url = "/";
    }

    # Set backend
    #set req.backend = portal;

    # Clean req.url
    call normalize_url;

    # Multiple hostnames
    call process_vhosts;

    # Deal with PURGES and BANS
    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        ban_url(req.url);
        error 200 "Purged.";
    }

    if (req.request == "BAN") {
        # Same ACL check as above:
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        ban("req.http.host == " + req.http.host +
            "&& req.url == " + req.url);
        # Throw a synthetic page so the
        # request won't go to the backend.
        error 200 "Ban added";
    }

    # Normalize Accept-Encoding header
    call normalize_encoding;
 
    # Call normalize_user_agent
    call normalize_user_agent;
    
    if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =
                req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }

    # Remove Google Analytics cookies.
    set req.http.cookie = regsuball( req.http.cookie, "__utm.=[^;]+(; )?", "" );

    # Remove a ";" prefix, if present.
    set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");

    # Remove empty cookies.
    if (req.http.cookie ~ "^ *$") {
        remove req.http.cookie;
    }

    if (req.http.X-REFRESH) {
        # Force a cache miss
        set req.hash_always_miss = true;
    }
    
    if (req.request != "GET" &&
        req.request != "HEAD" &&
        req.request != "PUT" &&
        req.request != "POST" &&
        req.request != "TRACE" &&
        req.request != "OPTIONS" &&
        req.request != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }

    if (req.url ~ "createObject") {
        return(pass);
    }

    if (req.request != "GET" && req.request != "HEAD") {
        # POST - Logins and edits
        if (req.request == "POST") {
            #set req.backend = adm;
            return(pass);
        }
        if (req.url ~ "^/.*/resolveuid/?"){
            remove req.http.cookie;
            return(lookup);
        }
        return(pass);
    }
    
    if (req.url ~ "^/(portal_javascripts|portal_css|portal_kss)/") {
        remove req.http.cookie;
        return(lookup);
    }
  
    if (req.url ~ "^/[^-]*\-cachekey[^.]*\.(css|kss|js|json)$") {
        remove req.http.cookie;
        return(lookup);
    }

    if (req.request == "GET" && req.url ~ "\.(png|gif|jpg|swf|flv|css|js|ico|pdf|htc|kss|bmp|json)$") {
        # Keep static files out of memory
        remove req.http.cookie;
        return(lookup);
    }

    if (req.request == "GET" && req.url ~ "\/at_download/?(.*)?$") {
        return(lookup);
    }

    if (req.request == "GET" && req.url ~ "\.(tiff|tif|svg|vsd|doc|ppt|pps|xls|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tgz|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm|pot|rtf|csv|asc|cst|emf|dot)$") {
        # Keep static files out of memory
        remove req.http.cookie;
        return(lookup);
    }

    if (req.request == "GET" && req.url ~ "(rss|RSS|atom\.xml)") {
        remove req.http.cookie;
        return(lookup);
    }

    if (req.request == "GET" && req.url ~ "\.(shtml|shtm|html|htm|xhtml|xhtm)") {
        return(lookup);
    }

    /* We only care about the "__ac.*" cookies, used for authentication */
    if (req.http.Cookie && (req.http.Cookie ~ "__ac(_(name|password|persistent))?=" || req.http.Cookie ~ "_ZopeId")) {
        #set req.backend = adm;
        return(pass);
    }

    # Força o cache de imagens de conteudo geradas pelo plone ou plone.app.imaging
    if (req.request == "GET" && req.url ~ "\/image_?(.*)?$") {
        return(lookup);
    }

    if (req.http.If-None-Match && !req.http.If-Modified-Since) {
        return(pipe);
    }

    /* Do not cache other authorized content */
    if (req.http.Authenticate || req.http.Authorization) {
        return(pass);
    }

    /* Auto-tagged traffic bought from Google Adwords includes a GET parameter ("gclid") that
    allows better tracking using Google Analytics. This "gclid" parameter holds a unique string identifying the clicked ad and the clicking user.
    Since Google Analytics is ran client-side (Javascript), there's no need to send the "gclid" parameter to the backend that changes for
    every request; making caching is impossible. This recipe will strip the "gclid" parameter making caching possible. */

    set req.url = regsuball(req.url,"\?gclid=[^&]+$",""); # strips when QS = "?gclid=AAA"
    set req.url = regsuball(req.url,"\?gclid=[^&]+&","?"); # strips when QS = "?gclid=AAA&foo=bar"
    set req.url = regsuball(req.url,"&gclid=[^&]+",""); # strips when QS = "?foo=bar&gclid=AAA" or QS = "?foo=bar&gclid=AAA&bar=baz"

    return(lookup);
}

sub vcl_hit {
    /* Deal with purge requests */
    if (req.request == "PURGE") {
        purge;
        error 200 "Purged";
    }
}

sub vcl_miss {
    if (req.http.If-Modified-Since) {
        return(pass);
    }

    if (req.request == "PURGE") {
        purge;
        error 404 "Not in cache";
    }
}

sub vcl_fetch {
    set beresp.do_esi = true;
    set beresp.grace = 120s;

    if (beresp.ttl < 7200s) {
        set beresp.ttl = 7200s;
    }

    # Cache de erros 404
    if (beresp.status == 404 || req.url ~ "\/404/?$") {
        unset beresp.http.set-cookie;
        set beresp.http.X-Varnish-TSE = "404 error";
        set beresp.ttl = 7d;
    } 

    /* If backen goes down (or other misconfiguration happens), backend gives varnish a 5xx.
    Varnish knows better than to cache this page, but it will pass it through to the user if the object grace has expired.
    Fortunately, varnish has the ability to reset the grace and serve the "good" page from cache until backend returns a non-5xx on that page. */
    # https://www.varnish-cache.org/docs/3.0/tutorial/handling_misbehaving_servers.html#saint-mode

    if (beresp.status >= 500) {
        set beresp.http.X-MSG = "erro";
        set beresp.saintmode = 10s;
        return(restart);
    }

    if (req.url ~ "^/(portal_javascripts|portal_css|portal_kss)/"){
        unset beresp.http.set-cookie;
        set beresp.http.X-Varnish-TSE = "resources";
        if (!beresp.http.cache-control){
            set beresp.http.cache-control = "max-age = 36000";
            set beresp.ttl = 36000s;
        }
    }

    if (req.url ~ "\.(png|gif|jpg|swf|flv|ico|pdf|htc|bmp)$") {
        unset beresp.http.set-cookie;
        set beresp.http.X-Varnish-TSE = "resources";
        if (!beresp.http.cache-control){
            set beresp.http.cache-control = "max-age = 36000";
            set beresp.ttl = 36000s;
        }
    }

    if (req.url ~ "\.(css|kss|js|json)$") {
        unset beresp.http.set-cookie;
        set beresp.http.X-Varnish-TSE = "static resources";
        set beresp.http.cache-control = "max-age = 31536000";
        set beresp.ttl = 31536000s;
    }


    if (req.url ~ "^/[^-]*\-cachekey[^.]*\.(css|kss|js|json)$") {
        unset beresp.http.set-cookie;
        set beresp.http.X-Tangrama = "special resources";
        set beresp.http.cache-control = "max-age = 31536000";
        set beresp.ttl = 31536000s;
    }

    if (req.request == "GET" && req.url ~ "\.(tiff|tif|svg|vsd|doc|ppt|pps|xls|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tgz|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm|pot|rtf|csv|asc|cst|emf|dot)$") {
        unset beresp.http.set-cookie;
        set beresp.http.X-Varnish-TSE = "Files";
        if (!beresp.http.cache-control){
            set beresp.http.cache-control = "max-age = 36000";
            set beresp.ttl = 36000s;
        }
    }

    if (req.url ~ "\/at_download/?(.*)?$") {
        unset beresp.http.set-cookie;
        set beresp.do_gzip = true;
        set beresp.http.x-tangrama = "files";
        set beresp.http.cache-control = "max-age = 36000";
        set beresp.ttl = 36000s;
    }

    # Força o cache de imagens de conteudo geradas pelo plone ou plone.app.imaging
    if (req.url ~ "\/image_?(.*)?$") {
        set beresp.http.X-Varnish-TSE = "imagem_conteudo";
        unset beresp.http.set-cookie;
    }

    # Robots indexing validation
    call robots_validation;

    if (req.url ~ "^/.*/resolveuid/?"){
        set beresp.http.X-Varnish-TSE = "ResolveUID";
        unset beresp.http.set-cookie;
        if (!beresp.http.cache-control){
            set beresp.http.cache-control = "max-age = 36000";
            set beresp.ttl = 36000s;
        }
    }

    if (req.url ~ "(rss_|search_rss|RSS|atom\.xml)") {
        set beresp.http.X-Varnish-TSE = "feed";
        unset beresp.http.set-cookie;
        set beresp.ttl = 1800s;
    }

    if (beresp.http.Set-Cookie) {
        return(hit_for_pass);
    }

    /* Do not cache if response contains any 'no cache' tokens */
    if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        return(hit_for_pass);
    }

    /* Do not cache if request contains an Authorization header, unless response is 'public' */
    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {
        return(hit_for_pass);
    }

    if (beresp.ttl <= 0s ||
        beresp.http.Set-Cookie ||
        beresp.http.Vary == "*") {
            /*
             * Mark as "Hit-For-Pass" for the next 2 minutes
             */
            set beresp.ttl = 120 s;
            return (hit_for_pass);
    }

    # http://www.w3.org/Protocols/rfc1341/4_Content-Type.html
    # https://www.varnish-cache.org/docs/trunk/tutorial/compression.html
    # No cache for now
    if (beresp.http.content-type ~ "text" || beresp.http.content-type ~ "application") {
        set beresp.do_gzip = false;
    }
    else {
        set beresp.do_gzip = false;
    }

    if(beresp.http.content-type ~ "video" || beresp.http.content-type ~ "audio") {
        set beresp.do_stream = true;
        set beresp.http.X-Stream = beresp.http.content-type;
    }

    call rewrite_s_maxage;
    set beresp.http.X-Cache-TTL = beresp.ttl;
    /* marker for vcl_deliver to reset Age: */
    set beresp.http.magicmarker = "1";
    return (deliver);
}

sub vcl_hash {

    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }
    return (hash);
}

sub vcl_deliver {
  set resp.http.gzip = req.can_gzip;

    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
        set resp.http.X-Cache-Hits = obj.hits;
    } else {
        set resp.http.X-Cache = "MISS";
    }

    if (resp.http.magicmarker) {
        /* Remove the magic marker */
        unset resp.http.magicmarker;
        /* By definition we have a fresh object */
        call rewrite_age;
    }
    return(deliver);
}

sub vcl_error {
    set obj.http.Content-Type = "text/html; charset=utf-8";
    set obj.http.Retry-After = "5";

    if (obj.status == 503 && req.restarts < 5) {
        set obj.http.X-Restarts = req.restarts;
        return (restart);
    }

    synthetic {"
        <?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
        <html>
            <head>
                <title>"} + obj.status + " " + obj.response + {"</title>
            </head>
            <body>
                <h1>Error "} + obj.status + " " + obj.response + {"</h1>
                <p>"} + obj.response + {"</p>
                <h3>Guru Meditation:</h3>
                <p>XID: "} + req.xid + {"</p>
                <hr>
                <p>Varnish cache server</p>
            </body>
        </html>
    "};
    return (deliver);
}

/* CUSTOM SUBROTINES */
sub normalize_url{
    if (req.url ~ "^http://") {
        set req.url = regsub(req.url, "http://[^/]*", "");
    }
    ### remove double // in urls, 
    ### /foo and /foo/ are the same url
    set req.url = regsuball( req.url, "//", "/"      );
    set req.url = regsub( req.url, "/([?])?$", "\1"  );
}

# The varnish response should always declare itself to be fresh
sub rewrite_age {
    if (resp.http.Age) {
        set resp.http.X-Varnish-Age = resp.http.Age;
        set resp.http.Age = "0";
    }
}

# Rewrite s-maxage to exclude from intermediary proxies
# (to cache *everywhere*, just use 'max-age' token in the response to avoid this override)
sub rewrite_s_maxage {
    if (beresp.http.Cache-Control ~ "s-maxage") {
        set beresp.http.Cache-Control = regsub(beresp.http.Cache-Control, "s-maxage=[0-9]+", "s-maxage=0");
        #unset beresp.http.Expires;
    }
}

sub normalize_encoding {
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(tiff|tif|svg|vsd|doc|ppt|pps|xls|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tgz|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm|pot|rtf|csv|asc|cst|emf|dot)$") {
            remove req.http.Accept-Encoding;
        }
        if (req.url ~ "\.(png|gif|jpg|swf|flv|css|js|ico|pdf|htc|kss|bmp|json)$") {
            remove req.http.Accept-Encoding;
        } elseif ("\/image_?(.*)?$") {
            remove req.http.Accept-Encoding;
        } elseif ("(rss|RSS|atom\.xml)") {
            set req.http.Accept-Encoding = "gzip";
        } elseif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elseif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            remove req.http.Accept-Encoding;
        }
    }
}

sub normalize_user_agent {
    if (req.http.user-agent ~ "MSIE" || req.http.user-agent ~ "Firefox" || req.http.user-agent ~ "Mozilla" || req.http.user-agent ~ "Safari" || req.http.user-agent ~ "Opera") {
        set req.http.X-UA = "pc";
    } elseif (req.http.User-Agent ~ "iPad" ) {
        # It says its a iPad - so let's give them the tablet-site
        set req.http.X-UA = "mobile-tablet";
    } elseif (req.http.User-Agent ~ "iP(hone|od)" || req.http.User-Agent ~ "Android") {
        set req.http.X-UA = "mobile-smart";
    } elseif (req.http.user-agent ~ "Opera Mini/" || req.http.user-agent ~ "Opera Mobi/" || req.http.User-Agent ~ "SymbianOS" || req.http.User-Agent ~ "^BlackBerry" || req.http.User-Agent ~ "^SonyEricsson" || req.http.User-Agent ~ "^Nokia" || req.http.User-Agent ~ "^SAMSUNG" || req.http.User-Agent ~ "^LG") {
        set req.http.X-UA = "mobile-other";
    } else {
        set req.http.X-UA = "nomatch";
    }
}

sub robots_validation {
    /* Don't display a cache link or snippet for this item in the Google search results and don't include this document in the Google search results */
    if (req.url ~ "\/(search|login|logged|cloud|sendto|folder|sitemap)(_)?(form|factories|rss)?$"){
       set beresp.http.X-Robots-Tag = "noindex,noarchive,nosnippet,nofollow";
    }

}
